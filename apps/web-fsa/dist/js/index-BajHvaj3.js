import{_ as r,A as O,J as x,u as B,M as E,d as j,x as G}from"./bootstrap-nS_r6Uzy.js";import _,{selectProps as M}from"./index-BpouPXFr.js";import{d as F,r as P,b as f}from"../jse/index-index-BsdptGcH.js";import"./index-DZFK9PNa.js";import"./Trigger-DmB6V4sb.js";import"./ResizeObserver.es-CDE7jhPe.js";import"./BaseInput-CIdroiOM.js";import"./Overflow-CQR0eu18.js";import"./DownOutlined-Cy6ShKlK.js";import"./CheckOutlined-zUdIMjW3.js";import"./SearchOutlined-8BTzpijE.js";import"./move-k9NGEOQn.js";import"./slide-B2l4e1mx.js";import"./useMergedState-DdQG7FS2.js";import"./FormItemContext-CbGyyj-A.js";import"./statusUtils-DG2SPV6v.js";const n=()=>null;n.isSelectOption=!0;n.displayName="AAutoCompleteOption";const u=()=>null;u.isSelectOptGroup=!0;u.displayName="AAutoCompleteOptGroup";function $(e){var s,o;return((s=e==null?void 0:e.type)===null||s===void 0?void 0:s.isSelectOption)||((o=e==null?void 0:e.type)===null||o===void 0?void 0:o.isSelectOptGroup)}const k=()=>r(r({},O(M(),["loading","mode","optionLabelProp","labelInValue"])),{dataSource:Array,dropdownMenuStyle:{type:Object,default:void 0},dropdownMatchSelectWidth:{type:[Number,Boolean],default:!0},prefixCls:String,showSearch:{type:Boolean,default:void 0},transitionName:String,choiceTransitionName:{type:String,default:"zoom"},autofocus:{type:Boolean,default:void 0},backfill:{type:Boolean,default:void 0},filterOption:{type:[Boolean,Function],default:!1},defaultActiveFirstOption:{type:Boolean,default:!0},status:String}),te=n,oe=u,v=F({compatConfig:{MODE:3},name:"AAutoComplete",inheritAttrs:!1,props:k(),slots:Object,setup(e,s){let{slots:o,attrs:C,expose:b}=s;x(!e.dropdownClassName);const p=P(),A=()=>{var t;const a=G((t=o.default)===null||t===void 0?void 0:t.call(o));return a.length?a[0]:void 0};b({focus:()=>{var t;(t=p.value)===null||t===void 0||t.focus()},blur:()=>{var t;(t=p.value)===null||t===void 0||t.blur()}});const{prefixCls:i}=B("select",e);return()=>{var t,a,d;const{size:S,dataSource:y,notFoundContent:N=(t=o.notFoundContent)===null||t===void 0?void 0:t.call(o)}=e;let c;const{class:g}=C,h={[g]:!!g,[`${i.value}-lg`]:S==="large",[`${i.value}-sm`]:S==="small",[`${i.value}-show-search`]:!0,[`${i.value}-auto-complete`]:!0};if(e.options===void 0){const m=((a=o.dataSource)===null||a===void 0?void 0:a.call(o))||((d=o.options)===null||d===void 0?void 0:d.call(o))||[];m.length&&$(m[0])?c=m:c=y?y.map(l=>{if(E(l))return l;switch(typeof l){case"string":return f(n,{key:l,value:l},{default:()=>[l]});case"object":return f(n,{key:l.value,value:l.value},{default:()=>[l.text]});default:throw new Error("AutoComplete[dataSource] only supports type `string[] | Object[]`.")}}):[]}const w=O(r(r(r({},e),C),{mode:_.SECRET_COMBOBOX_MODE_DO_NOT_USE,getInputElement:A,notFoundContent:N,class:h,popupClassName:e.popupClassName||e.dropdownClassName,ref:p}),["dataSource","loading"]);return f(_,w,j({default:()=>[c]},O(o,["default","dataSource","options"])))}}}),le=r(v,{Option:n,OptGroup:u,install(e){return e.component(v.name,v),e.component(n.displayName,n),e.component(u.displayName,u),e}});export{oe as AutoCompleteOptGroup,te as AutoCompleteOption,k as autoCompleteProps,le as default};
